apply plugin: 'com.github.ben-manes.versions'

buildscript {
   repositories {
      mavenCentral() 
      jcenter()
   }

   dependencies {
   // required for java 11
   // classpath 'javax.xml.bind:jaxb-api:2.3.0'
   // classpath 'com.sun.xml.bind:jaxb-impl:2.3.0'
   // classpath 'com.sun.xml.bind:jaxb-core:2.3.0'
   // classpath 'javax.activation:activation:1.1.1'
   // classpath 'javax.xml.bind:jsr173_api:1.0'
	   classpath 'com.github.ben-manes:gradle-versions-plugin:0.13.0'
   }
}

ext.customDir = 'src/custom/java'
ext.jaxbExtGenOutputDir = 'gen-src-ext/main/java'
ext.jaxbLpGenOutputDir = 'gen-src-lp/main/java'

mainClassName = "one.jodi.bootstrap.JodiController"

// Jar task configuration
jar {
	manifest {
		attributes 'Implementation-Title': 'Jodi Core', 'Implementation-Version': version
	}
}

configurations {
	xmlExtensions
}

applicationDistribution.from(configurations['xmlExtensions'].artifacts.files) {
                        into "lib"}

// ensure that we build jodi_odi12 jar *before* the jodi_core distZip task
// because we want distribute jodi_odi12 with jodi_core.zip
distZip.dependsOn(":jodi_odi12:jar", ":jodi_plugins:jar")

applicationDistribution.into('lib') {
   // regular expression avoids including the *-test-* jar
   exclude '*-test-*'
   from file('../jodi_odi12/build/libs')
   fileMode 0755
}

// copy content from customized projects
applicationDistribution.into('customizations/') {
   include '*.jar'
   from file('../jodi_plugins/build/libs')
   fileMode 0755
}

applicationDistribution.into('customizations/xsd') {
   include '*.xsd'
   from file('../jodi_plugins/src/main/resources/generic')
   fileMode 0755
}

// causing build to fail disable for now
// applicationDistribution.from(javadoc) { 
//	    into "docs/javadoc" }


sourceSets {
	
	xmlExtensions {
		java {
			srcDirs = [jaxbExtGenOutputDir]
		}
	}
	main { 
		java {
			srcDirs += 'src/main/java'
			srcDirs += jaxbGenOutputDir
			srcDirs += customDir 
		}
		resources {
	      srcDirs += '../shared/resources'
		}
		compileClasspath += files(xmlExtensions.output.classesDirs)
	}
	
	test {
		compileClasspath += files(xmlExtensions.output.classesDirs)		
		runtimeClasspath += files(xmlExtensions.output.classesDirs)
	}
}

processResources{
	from(jaxbGenOutputDir) {include '**/jaxb.properties'}
}


task extensionsJar(type: Jar, dependsOn: compileXmlExtensionsJava) {
	baseName 'jodi_core_extensions'
	from sourceSets.xmlExtensions.output.classesDirs
}

artifacts {
	xmlExtensions extensionsJar
}

javadoc {
	classpath += files(sourceSets.xmlExtensions.output.classesDirs)
}

task jaxb_task (dependsOn: 'jaxb_ext') {
	// output directory
	inputs.dir 'src/main/resources'
	outputs.dir jaxbGenOutputDir
	ext.jaxbTargetDir = file(jaxbGenOutputDir)
	ext.packageRoot = 'one.jodi.core'
	// perform actions
	doLast {
		ext.jaxbTargetDir.mkdirs()
		ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
		classpath: buildscript.configurations.classpath.asPath + ';'
		+ configurations.jaxb.asPath)

		//
		ant.xjc(
				removeOldOutput : true,
				extension: true,
				destdir: ext.jaxbTargetDir,
				package: ext.packageRoot+'.model',
				schema:  'src/main/resources/jodi-model.v1.1.xsd') {
					binding(dir: 'src/main/resources/', includes:'jodi-model.v1.1.xjb jodi-extensions.v1.0.episode')
					arg(value: '-Xinject-code')
					arg(value: '-Xdefault-value')
				}

		ant.xjc(
				removeOldOutput : true,
				extension: true,
				destdir: ext.jaxbTargetDir,
				package: ext.packageRoot+'.etlmodel',
				schema:  'src/main/resources/jodi-packages.v1.1.xsd'){
					binding(dir: 'src/main/resources/', includes:'jodi-packages.v1.1.xjb jodi-packages-extensions.v1.1.episode')
					arg(value: '-Xdefault-value')
				}
				
		ant.xjc(
				removeOldOutput : true,
				extension: true,
				destdir: ext.jaxbTargetDir,
				package: ext.packageRoot+'.lpmodel',
				schema:  'src/main/resources/jodi-loadplan.v1.0.xsd')
				{
					binding(dir: 'src/main/resources/', includes:'jodi-loadplan.v1.0.xjb')
					arg(value: '-Xinject-code')
					arg(value: '-Xdefault-value')
				}

		ant.xjc(
				removeOldOutput : true,
				extension: true,
				destdir: ext.jaxbTargetDir,
				package: ext.packageRoot+'.procedure',
				schema:  'src/main/resources/jodi-procedure.v1.0.xsd') {
					binding(dir: 'src/main/resources/', includes:'jodi-procedure.v1.0.xjb')
				}

		ant.xjc(
				removeOldOutput : true,
				extension: true,
				destdir: ext.jaxbTargetDir,
				package: ext.packageRoot+'.variables',
				schema:  'src/main/resources/jodi-variables.v1.0.xsd')

        ant.xjc(
            removeOldOutput : true,
				extension: true,
				destdir: ext.jaxbTargetDir,
				package: ext.packageRoot+'.sequences',
				schema:  'src/main/resources/jodi-sequences.v1.0.xsd')
        ant.xjc(
                removeOldOutput : true,
                extension: true,
                destdir: ext.jaxbTargetDir,
                package: ext.packageRoot+'.constraints',
                schema:  'src/main/resources/jodi-constraints.v1.0.xsd')
	}
}

 task jaxb_ext () {
	inputs.dir 'src/main/resources'
	outputs.dir jaxbExtGenOutputDir
//
	doLast {
		file(jaxbExtGenOutputDir).mkdirs()
		ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
		classpath: buildscript.configurations.classpath.asPath + ';'
		+ configurations.jaxb.asPath)

		//
		ant.xjc(
				removeOldOutput : true,
				extension: true,
				destdir: "${jaxbExtGenOutputDir}",
				package: 'one.jodi.model.extensions',
				schema:  'src/main/resources/jodi-extensions.v1.0.xsd')
		//
		ant.xjc(
				removeOldOutput : true,
				extension: true,
				destdir: "${jaxbExtGenOutputDir}",
				package: 'one.jodi.etlmodel.extensions',
				schema:  'src/main/resources/jodi-packages-extensions.v1.1.xsd')
	}
}

compileXmlExtensionsJava.dependsOn jaxb_ext

compileJava.dependsOn += [compileXmlExtensionsJava, jaxb_task]

jar.dependsOn extensionsJar
assemble.dependsOn extensionsJar

dependencies {

	compile group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.0'
    compile group: 'com.sun.xml.bind', name: 'jaxb-impl', version: '2.3.0'
    compile group: 'com.sun.xml.bind', name: 'jaxb-core', version: '2.3.0'
    compile group: 'javax.activation', name: 'activation', version: '1.1.1'
    compile project(':jodi_base')
	testCompile project(path: ':jodi_base', configuration: 'testArtifacts')
    testCompile project(':jodi_base').sourceSets.test.output
    // include ODI 12.2 (in compile context for Eclipse or provided for build)
//	compile project(':jodi_model')

    testCompile 'org.apache.commons:commons-csv:1.4'

	//JAXB xjc plugin
	jaxb group: 'com.sun.xml.bind', name: 'jaxb-xjc', version: '2.2.11'
	
	compile("org.apache.commons:commons-configuration2:2.1") {
	   // remove default libraries and replace with more recent versions
	   exclude module: 'commons-logging'
	   exclude module: 'commons-beanutils'
	}
	   
	// use latest version of commons libs for commons-configuration;
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.4'
	compile group: 'commons-beanutils', name: 'commons-beanutils', version: '1.9.3'
	
	// cloning with upgraded dependent library
	compile("uk.com.robust-it:cloning:1.9.2") {
	   exclude module: 'Objenesis'
	}
	compile("org.objenesis:objenesis:2.4")
}

task sourceSetJavaProperties {
	doLast {
		sourceSets {
			xmlExtensions {
				println "java.srcDirs = ${java.srcDirs}"
				println "resources.srcDirs = ${resources.srcDirs}"
				println "java.files = ${java.files.name}"
				println "allJava.files = ${allJava.files.name}"
				println "resources.files = ${resources.files.name}"
				println "allSource.files = ${allSource.files.name}"
				println "output.classesDirs = ${output.classesDirs}"
				println "output.resourcesDir = ${output.resourcesDir}"
				println "output.files = ${output.files}"
				println "compileClasspath = ${compileClasspath}"
				compileClasspath.each {
					println it
				}
			}
		}
	}
}


def fixWindowsStartScript(writer, lines) {
	lines.eachWithIndex { line, i ->
		if ( i < 6 ) {
			writer.println line
		} else if (i == 6) {
			writer.println ''
			writer.println "set $odiLibPathVariable=%$odiLibPathVariable%"
			writer.println line
		} else if (line =~ /^set CLASSPATH=%APP_HOME%/) {
			writer.println line
			writer.println ''
			writer.println "if \"%$odiLibPathVariable%\" == \"\" goto noodi"
			writer.println "goto hasodi"
			writer.println ":noodi"
			writer.println "echo."
			writer.println "echo ERROR: $odiLibPathVariable is not set."
			writer.println "echo."
			writer.println "echo Please set the $odiLibPathVariable variable, in your environment or in the start script,"
			writer.println "echo to the location of the jar files in you ODI installation."
			writer.println "goto fail"
			writer.println ":hasodi"
			writer.println "set CLASSPATH=%$odiLibPathVariable%\\*;%CLASSPATH%;%APP_HOME%\\lib\\*"
			writer.println ''
			writer.println "set DEFAULT_JVM_OPTS=\"-Dlog4j.configurationFile=%~dp0/../conf/log4j2.xml\""
			writer.println ''
		} else {
			writer.println line
		}
	}
}

def fixUnixStartScript(writer, lines) {
	lines.eachWithIndex { line, i ->
		if ( i < 8 ) {
			writer.println line
		} else if (i==8) {
			writer.println ''
			writer.println "$odiLibPathVariable=\$$odiLibPathVariable"
			writer.println line
		} else if (line =~ /^CLASSPATH=\$/) {
			writer.println line
			writer.println ''
			writer.println "CLASSPATH=\$$odiLibPathVariable/:\$CLASSPATH:\$APP_HOME/lib/*"
			writer.println 'if [ \"x$ODI_LIB_PATH\" = \"x\" ] ; then'
			writer.println "	die \"ERROR: ODI_LIB_PATH is not set."
			writer.println ''
			writer.println "Please set the ODI_LIB_PATH variable, in your environment or in the start script,"
			writer.println "to the location of the jar files in you ODI installation.\""
			writer.println "fi"
			writer.println ''
			writer.println "DEFAULT_JVM_OPTS=\"-Dlog4j.configurationFile=\${0%/*}/../conf/log4j2.xml\""
			writer.println ''
		} else {
			writer.println line
		}
	}
}
