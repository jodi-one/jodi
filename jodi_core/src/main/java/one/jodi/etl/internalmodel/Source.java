package one.jodi.etl.internalmodel;

import one.jodi.model.extensions.SourceExtension;

import java.util.List;

/**
 * A Source describes a data store or a Temporary Interface as part of a dataset definition. Sources are combined with filter, join and
 * lookup operations.
 */
public interface Source {
    /**
     * Convenience method to get the objects parent.
     *
     * @return source
     */
    Dataset getParent();

    /**
     * Fetches the name of the model containing source data store, a.k.a DB schema.  This can be specified or otherwise
     * derived by Jodi.
     *
     * @return model name
     */
    String getModel();

    /**
     * Fetches the name of the data source, a.k.a table name.
     *
     * @return source name
     */
    String getName();

    /**
     * Fetches the alias of the source name. This may be manually specified or derived by Jodi.
     *
     * @return source alias
     */
    String getAlias();

    /**
     * Fetches filter condition as SQL expression.  When not defined the call will return an empty string.
     *
     * @return filter expression
     */
    String getFilter();

    /**
     * Execution location for where filter should be executed.  This may be either
     * {@link ExecutionLocationtypeEnum.SOURCE} or
     * {@link one.jodi.core.model.ExecutionLocationtypeEnum.SOURCE}.  This may be
     * specified in the input model or otherwise derived by Jodi.
     *
     * @return Execution location enum
     */
    ExecutionLocationtypeEnum getFilterExecutionLocation();

    /**
     * Fetches join condition as SQL expression for INNER and OUTER joins.
     *
     * @return join expression
     */
    String getJoin();


    /**
     * Fetch join's type.
     * <p>
     * If undefined this will be set to {@link JoinTypeEnum#NOT_DEFINED}
     *
     * @return join type
     */
    JoinTypeEnum getJoinType();

    /**
     * Execution location for where join should be executed.  This may be either {@link ExecutionLocationtypeEnum#WORK} or
     * {@link ExecutionLocationtypeEnum#SOURCE}.  This may be be specified in the input model
     * or otherwise derived by Jodi.
     *
     * @return execution location of join operation
     */
    ExecutionLocationtypeEnum getJoinExecutionLocation();

    /**
     * Fetch the list of lookups that are defined in the source.  Returns non-null List.
     *
     * @return lookups
     */
    List<Lookup> getLookups();

    /**
     * Fetches the LKM used to load data for Source.
     *
     * @return LKM
     */
    KmType getLkm();


    /**
     * Indicates if the SQL expression defined by temporary interface is incorporated as subselect query in the SQL expression generated by Transformation.
     * <p>
     * This only applies to temporary interfaces.
     *
     * @return sub select indicator
     */
    boolean isSubSelect();

    /**
     * Indicates if the source data store is temporary.
     *
     * @return temporary indicator
     */
    boolean isTemporary();


    /**
     * Fetch the extension provided by Jodi customization
     *
     * @return extension
     */
    SourceExtension getExtension();

    /**
     * Fetch the source's journalized status
     */
    boolean isJournalized();

    /**
     * Get the name of the temporary data store associated with Source.
     *
     * @return Temporary datastore name
     */
    //String getTemporaryDataStore();
    Source findJoinedSource();

    String getComponentName();

    List<Flow> getFlows();


    /**
     * @return List of subscribers used when Journalizing.
     */
    List<String> getSubscribers();

    String getJournalizedFilters();
}

