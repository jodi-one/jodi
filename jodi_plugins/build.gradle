//
// @version  $Revision: 14078 $, $Date: 2016-02-24 15:48:58 +0100 (Wed, 24 Feb 2016) $
//
ext.generic = 'src/main/java'

sourceSets {
    main {
        java {
            srcDirs = [jaxbGenOutputDir, generic]
        }
    }
}

dependencies {
    compile project(':jodi_core')
    compile project(':jodi_odi12')
    compile project(path: ':jodi_core', configuration: 'xmlExtensions')
    testCompile project(path: ':jodi_core', configuration: 'xmlExtensions')
    testCompile project(':jodi_base').sourceSets.test.output
    testCompile project(':jodi_core').sourceSets.test.output
    testCompile project(':jodi_core')
    testCompile project(':jodi_odi12')
}

task jaxb () {
    inputs.dir  'src/main/resources'
    outputs.dir  jaxbGenOutputDir

    doLast {
        file(jaxbGenOutputDir).mkdirs()
        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
                classpath: buildscript.configurations.classpath.asPath + ';' + configurations.jaxb.asPath)

        ant.xjc(
                removeOldOutput : true,
                extension: true,
                destdir: "${jaxbGenOutputDir}",
                package: 'one.jodi.model.extensions',
                schema:  'src/main/resources/jodi-extensions.v1.0.xsd')
    }
}

task jaxbp () {
    inputs.dir 'src/main/resources/'
    outputs.dir jaxbGenOutputDir

    doLast {
        file(jaxbGenOutputDir).mkdirs()
        ant.taskdef(name: 'xjc', classname: 'org.jvnet.jaxb2_commons.xjc.XJC2Task',
                classpath: buildscript.configurations.classpath.asPath + ';' + configurations.jaxb.asPath)

        ant.xjc(
                removeOldOutput : true,
                extension: true,
                destdir:  "${jaxbGenOutputDir}",
                package: 'one.jodi.etlmodel.extensions',
                schema:  'src/main/resources/jodi-packages-extensions.v1.1.xsd')
    }
}

compileJava.dependsOn(['jaxb', 'jaxbp'])

def fixWindowsStartScript(writer, lines) {
    lines.eachWithIndex { line, i ->
        if ( i < 6 ) {
            writer.println line
        } else if (i == 6) {
            writer.println ''
            writer.println "set $odiLibPathVariable=%$odiLibPathVariable%"
            writer.println line
        } else if (line =~ /^set CLASSPATH=%APP_HOME%/) {
            writer.println line
            writer.println ''
            writer.println "if \"%$odiLibPathVariable%\" == \"\" goto noodi"
            writer.println "goto hasodi"
            writer.println ":noodi"
            writer.println "echo."
            writer.println "echo ERROR: $odiLibPathVariable is not set."
            writer.println "echo."
            writer.println "echo Please set the $odiLibPathVariable variable, in your environment or in the start script,"
            writer.println "echo to the location of the jar files in you ODI installation."
            writer.println "goto fail"
            writer.println ":hasodi"
            writer.println "set CLASSPATH=%$odiLibPathVariable%\\*;%CLASSPATH%;%APP_HOME%\\lib\\*"
            writer.println ''
            writer.println "set DEFAULT_JVM_OPTS=\"-Dlog4j.configurationFile=../lib/log4j2.xml\""
            writer.println ''
        } else {
            writer.println line
        }
    }
}

def fixUnixStartScript(writer, lines) {
    lines.eachWithIndex { line, i ->
        if ( i < 8 ) {
            writer.println line
        } else if (i==8) {
            writer.println ''
            writer.println "$odiLibPathVariable=\$$odiLibPathVariable"
            writer.println line
        } else if (line =~ /^CLASSPATH=\$/) {
            writer.println line
            writer.println ''
            writer.println "CLASSPATH=\$$odiLibPathVariable/:\$CLASSPATH:\$APP_HOME/lib/*"
            writer.println 'if [ \"x$ODI_LIB_PATH\" = \"x\" ] ; then'
            writer.println "	die \"ERROR: ODI_LIB_PATH is not set."
            writer.println ''
            writer.println "Please set the ODI_LIB_PATH variable, in your environment or in the start script,"
            writer.println "to the location of the jar files in you ODI installation.\""
            writer.println "fi"
            writer.println ''
            writer.println "DEFAULT_JVM_OPTS=\"-Dlog4j.configurationFile=../lib/log4j2.xml\""
            writer.println ''
        } else {
            writer.println line
        }
    }
}
