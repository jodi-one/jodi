apply plugin: 'groovy'
apply plugin: 'org.liquibase.gradle'

configurations{
    liquibaseRuntime.extendsFrom runtime
}

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven {
            url 'https://dl.bintray.com/content/djmijares/gradle-plugins'
        }
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath "org.liquibase:liquibase-gradle-plugin:2.0.3"
    }
}

repositories {
    mavenCentral()
    jcenter()
}

task lb () {
    def urlDev = 'jdbc:oracle:thin:@DB202007280549_high?TNS_ADMIN=/opt/git/opc/src/main/resources/wallet/'
    def urlPrd = urlDev
    liquibase {
        activities {
            chinook {
                changeLogFile 'src/main/resources/liquibase/chinook.xml'
                url urlDev
                username 'CHINOOK'
                password System.getProperty('OCI_CHINOOK_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_CHINOOK'
                referencePassword System.getProperty('OCI_CHINOOK_PWD')
            }
            chinookData {
                changeLogFile 'src/main/resources/liquibase/chinook_data.xml'
                url urlDev
                username 'CHINOOK'
                password System.getProperty('OCI_CHINOOK_PWD')
                diffTypes "data"

                referenceUrl urlPrd
                referenceUsername 'PRD_CHINOOK'
                referencePassword System.getProperty('OCI_CHINOOK_PWD')
            }
            dwh_dmt {
                changeLogFile 'src/main/resources/liquibase/dwh_dmt.xml'
                url urlDev
                username 'DWH_DMT'
                password System.getProperty('OCI_JODI_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_DWH_DMT'
                referencePassword System.getProperty('OCI_JODI_PWD')
            }
            dwh_sto {
                changeLogFile 'src/main/resources/liquibase/dwh_sto.xml'
                url urlDev
                username 'DWH_STO'
                password System.getProperty('OCI_JODI_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_DWH_STO'
                referencePassword System.getProperty('OCI_JODI_PWD')
            }
            dwh_sti {
                changeLogFile 'src/main/resources/liquibase/dwh_sti.xml'
                url urlDev
                username 'DWH_STI'
                password System.getProperty('OCI_JODI_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_DWH_STI'
                referencePassword System.getProperty('OCI_JODI_PWD')
            }
            dwh_src {
                changeLogFile 'src/main/resources/liquibase/dwh_src.xml'
                url urlDev
                username 'DWH_SRC'
                password System.getProperty('OCI_JODI_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_DWH_SRC'
                referencePassword System.getProperty('OCI_JODI_PWD')
            }
            dwh_con_chinook {
                changeLogFile 'src/main/resources/liquibase/cwh_con_chinook.xml'
                url urlDev
                username 'DWH_CON_CHINOOK'
                password System.getProperty('OCI_JODI_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_DWH_CON_CHINOOK'
                referencePassword System.getProperty('OCI_JODI_PWD')

            }
            dwh_stg {
                changeLogFile 'src/main/resources/liquibase/dwh_stg.xml'
                url urlDev
                username 'DWH_STG'
                password System.getProperty('OCI_JODI_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_DWH_STG'
                referencePassword System.getProperty('OCI_JODI_PWD')
            }
            dwh_con {
                changeLogFile 'src/main/resources/liquibase/dwh_con.xml'
                url urlDev
                username 'DWH_CON'
                password System.getProperty('OCI_JODI_PWD')

                referenceUrl urlPrd
                referenceUsername 'PRD_DWH_CON'
                referencePassword System.getProperty('OCI_JODI_PWD')
            }
        }
        runList = 'chinook, dwh_dmt, dwh_sto, dwh_sti, dwh_con_chinook, dwh_con, dwh_src, dwh_stg'
    }
}

test {
    systemProperty 'ODI_REPO_PWD', System.getProperty("ODI_REPO_PWD")
    systemProperty 'ODI_USER_PWD', System.getProperty("ODI_USER_PWD")
    systemProperty 'ORCL_SYS_USER_PWD', System.getProperty("ORCL_SYS_USER_PWD")
    systemProperty 'ODI_DAPWD', System.getProperty("ODI_DAPWD")
    systemProperty 'OCI_CHINOOK_PWD', System.getProperty("OCI_CHINOOK_PWD")
    systemProperty 'OCI_JODI_PWD', System.getProperty("OCI_JODI_PWD")
    // memory settings moved to ../gradle.properties
    maxHeapSize = "2048m"
    // each test is run by parallel agent; rational is that we have large 
    // test cases that require a long execution time with lot's of I/O
    forkEvery = 1
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Jodi QA', 'Implementation-Version': archiveVersion
    }
    include("$buildDir/reports/**")
}

sourceSets {
    test {
        compileClasspath += files(new File('../jodi_odi12/src/test/java/'))
        runtimeClasspath += files(new File('../jodi_odi12/src/test/java/'))
    }
}

dependencies {
    // include ODI 12.2 (in implementation context for Eclipse or provided for build)
    implementation project(':jodi_odi12')
//    implementation fileTree(dir: 'lib', include: '*/**.jar')
    implementation project(':jodi_odi12')
    implementation 'org.codehaus.xml:groovy-all:2.4.14'
   // implementation project(path: ':jodi_core', configuration: 'xmlExtensions')
    implementation 'javax.xml.bind:jaxb-api:2.3.0'
    implementation  'org.dbunit:dbunit:2.5.1'
    implementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.3'

    // ojdbc10
    compile fileTree(include: ['*.jar'], dir: 'lib')

    liquibaseRuntime 'org.liquibase:liquibase-core:3.8.1'
    liquibaseRuntime 'org.liquibase:liquibase-groovy-dsl:2.1.1'
    liquibaseRuntime 'javax.xml.bind:jaxb-api:2.3.0'

    // for test
   // compile project(path: ':jodi_core', configuration: 'xmlExtensions')
    testImplementation group: 'org.dbunit', name: 'dbunit', version: '2.5.1'
    testImplementation "xmlunit:xmlunit:1.6"
  //  compile project(path: ':jodi_base', configuration: 'testArtifacts')
}

// not needed and remains empty
def fixWindowsStartScript(writer, lines) {}

def fixUnixStartScript(writer, lines) {}
