//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference ementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.10.26 at 10:02:08 AM EDT 
//


package one.jodi.core.model.visitors;

import one.jodi.core.model.*;

import javax.xml.bind.JAXBElement;

public class DepthFirstTraverserImpl
        implements Traverser {

    @Override
    public void traverse(Dataset visitable, Visitor visitor) {
        if (visitable.getSource() != null) {
            for (Source bean : visitable.getSource()) {
                ((Visitable) bean).accept(visitor);
            }
        }


        //visitable.accept(visitor);
    }

    @Override
    public void traverse(Datasets visitable, Visitor visitor) {
        if (visitable.getDataset() != null) {
            for (Dataset bean : visitable.getDataset()) {
                ((Visitable) bean).accept(visitor);
            }
        }

        if (visitable.getLkm() != null) visitable.getLkm().accept(visitor);
    }

    @Override
    public void traverse(FlowType visitable, Visitor visitor) {
    }

    @Override
    public void traverse(FlowsType visitable, Visitor visitor) {
        for (JAXBElement<? extends FlowType> obj : visitable.getFlow()) {
            obj.getValue().accept(visitor);
        }
    }

    @Override
    public void traverse(KmOption visitable, Visitor visitor) {
        //?
        //visitable.accept(visitor);
    }

    @Override
    public void traverse(KmOptions visitable, Visitor visitor) {
        if (visitable.getKmOption() != null) {
            for (KmOption bean : visitable.getKmOption()) {
                bean.accept(visitor);
            }
        }
    }

    @Override
    public void traverse(KmType visitable, Visitor visitor) {
        //visitable.getKmOptions().accept(visitor);
    }

    @Override
    public void traverse(Lookup visitable, Visitor visitor) {
    }

    @Override
    public void traverse(Lookups visitable, Visitor visitor) {
        if (visitable.getLookup() != null) {
            for (Lookup bean : visitable.getLookup()) {
                bean.accept(visitor);
            }
        }
    }

    @Override
    public void traverse(MappingExpressions visitable, Visitor visitor) {
    }

    @Override
    public void traverse(Mappings visitable, Visitor visitor) {
        for (Targetcolumn bean : visitable.getTargetColumn()) {
            bean.accept(visitor);
        }
        if (visitable.getIkm() != null) visitable.getIkm().accept(visitor);
        if (visitable.getCkm() != null) visitable.getCkm().accept(visitor);
    }

    @Override
    public void traverse(ColumnType visitable, Visitor visitor) {
    }

    @Override
    public void traverse(PivotType visitable, Visitor visitor) {
        for (ColumnType bean : visitable.getColumn()) {
            bean.accept(visitor);
        }
    }

    @Override
    public void traverse(Properties visitable, Visitor visitor) {
    }

    @Override
    public void traverse(Source visitable, Visitor visitor) {
        if (visitable.getLookups() != null) visitable.getLookups().accept(visitor);
        if (visitable.getFlows() != null) visitable.getFlows().accept(visitor);
    }

    @Override
    public void traverse(Targetcolumn visitable, Visitor visitor) {
        if (visitable.getMappingExpressions() != null) visitable.getMappingExpressions().accept(visitor);
        if (visitable.getProperties() != null) visitable.getProperties().accept(visitor);
    }

    @Override
    public void traverse(Transformation visitable, Visitor visitor) {
        if (visitable.getDatasets() != null) visitable.getDatasets().accept(visitor);
        if (visitable.getMappings() != null) visitable.getMappings().accept(visitor);
    }

    @Override
    public void traverse(UnPivotType visitable, Visitor visitor) {
        for (ColumnType bean : visitable.getColumn()) {
            bean.accept(visitor);
        }
    }

    @Override
    public void traverse(SubQueryType visitable, Visitor visitor) {
        for (SubQueryType.Column bean : visitable.getColumn()) {
            bean.accept(visitor);
        }
    }

    @Override
    public void traverse(SyntheticRowType aBean, Visitor aAvisitor) {

    }


}
